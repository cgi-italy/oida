image: node:16.13.1

cache:
  untracked: true
  key: '$CI_COMMIT_REF_SLUG'
  paths:
    - node_modules/
    - 'packages/*/node_modules'
  policy: pull

stages:
  - build
  - publish
  - deploy

build_docs:
  stage: build
  needs:
    - pipeline: $PARENT_PIPELINE_ID
      job: build
  artifacts:
    paths:
      - 'packages/docs/dist'
    expire_in: 1 hr
  script:
    - npm run typedoc -- --out ./packages/docs/static/typedoc
    - cd packages/docs && npm ci && DEPLOYMENT_URL=https://${DOCS_DEPLOYMENT_HOST} npm run build:docs
  only:
    - branches

publish_docs:
  stage: publish
  image: docker:18.09.9
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''
  services:
    - docker:18.09.9-dind
  script:
    - setup_docker
    - build_docker_image
  dependencies:
    - build_docs
  only:
    - branches

deploy_docs:
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster k8s --server="${K8S_CLUSTER_ADDRESS}"
    - kubectl config set-credentials ${K8S_USER} --token=${K8S_TOKEN}
    - kubectl config set-context default --cluster=k8s --user=${K8S_USER} --namespace=${K8S_NAMESPACE}
    - kubectl config use-context default
    - helm upgrade oida-docs ./packages/docs/deploy --set image.tag=${VERSION_TAG} --set "ingress.hosts[0].host=${DOCS_DEPLOYMENT_HOST},ingress.hosts[0].paths={/}" --set "ingress.tls[0].hosts[0]=${DOCS_DEPLOYMENT_HOST}" --set "gatekeeper.redirect=https://${DOCS_DEPLOYMENT_HOST}" --namespace ${K8S_NAMESPACE} --reuse-values
  dependencies:
    - publish_docs
  only:
    refs:
      - master

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x

  export VERSION_TAG=$(if [ "$CI_COMMIT_TAG" == "" ]; then echo $CI_COMMIT_REF_SLUG.$CI_PIPELINE_IID.$CI_COMMIT_SHORT_SHA; else echo ${CI_COMMIT_TAG}; fi)

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function docker_login() {
    echo "Logging to Docker registry..."
    docker login -u "$DOCKER_REGISTRY_USERNAME" -p "$DOCKER_REGISTRY_PASSWORD" "$DOCKER_REGISTRY_URL"
    echo ""
  }

  function build_docker_image() {
    docker_login

    DOCKER_TAG=$DOCKER_REGISTRY_URL/oida-docs:$VERSION_TAG
    echo "Building oida-docs Docker image..."
    docker build \
        --build-arg HTTP_PROXY="$HTTP_PROXY" \
        --build-arg http_proxy="$http_proxy" \
        --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
        --build-arg https_proxy="$https_proxy" \
        --build-arg FTP_PROXY="$FTP_PROXY" \
        --build-arg ftp_proxy="$ftp_proxy" \
        --build-arg NO_PROXY="$NO_PROXY" \
        --build-arg no_proxy="$no_proxy" \
        -t "$DOCKER_TAG" ./packages/docs

    echo "Pushing to Docker Registry..."
    docker push "$DOCKER_TAG"
    echo ""
  }

before_script:
  - *auto_devops
