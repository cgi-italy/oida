image: node:12.16.3

cache:
  untracked: true
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/
    - "packages/*/node_modules"
  policy: pull

variables:
  RELEASE_MSG: "chore(release): publish"

stages:
  - setup
  - build
  - test
  - docs
  - publish
  - deploy
  - release

install_dependencies:
  stage: setup
  cache:
    untracked: true
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - node_modules/
      - "packages/*/node_modules"
    policy: pull-push
  script:
    - npm ci
  only:
    - branches

build:
  stage: build
  artifacts:
    paths:
      - "packages/*/dist"
      - "packages/*/es"
      - "packages/*/lib"
      - "packages/*/styles"
      - "packages/*/types"
    expire_in: 1 hr
  script:
    - npm run build:es
    - npm run build:umd
  only:
    - branches

lint:
  stage: test
  script:
    - npm run lint
  dependencies: []
  only:
    - branches
  except:
    variables:
      - $CI_COMMIT_TITLE == $RELEASE_MSG

test:
  stage: test
  script:
    - npm run test
  dependencies:
    - build
  only:
    - branches
  except:
    variables:
      - $CI_COMMIT_TITLE == $RELEASE_MSG

build_docs:
  stage: docs
  artifacts:
    paths:
      - "packages/docs/dist"
    expire_in: 1 hr
  script:
    - npm run typedoc -- --out ./packages/docs/static/typedoc
    - cd packages/docs && npm ci && USE_SIMPLE_CSS_MINIFIER=true DEPLOYMENT_URL=https://${DOCS_DEPLOYMENT_HOST} npm run build:docs
  only:
    - branches

publish_canary:
  stage: publish
  script:
    - nexus_login
    - "node_modules/.bin/lerna publish --registry https://$NEXUS_REPO/ --canary --force-publish --dist-tag $CI_COMMIT_REF_SLUG --preid $CI_COMMIT_REF_SLUG --yes"
  dependencies:
    - build
  only:
    - branches
  except:
    variables:
      - $CANARY_PUBLISH_DISABLED
      - $CI_COMMIT_TITLE == $RELEASE_MSG

publish_apps:
  stage: publish
  image: docker:18.09.9
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:18.09.9-dind
  script:
    - setup_docker
    - build_docker_images
  dependencies:
    - build
    - build_docs
  only:
    - branches
  except:
    variables:
      - $APPS_PUBLISH_DISABLED

publish_release:
  stage: publish
  script:
    - nexus_login
    - node_modules/.bin/lerna publish from-git --registry https://$NEXUS_REPO/ --yes
  dependencies:
    - build
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_TITLE == $RELEASE_MSG


github_push:
  stage: publish
  variables:
    GIT_STRATEGY: clone
  script:
    - merge_to_github_branch
    - push_to_github
  dependencies:
    - install_dependencies
  when: manual
  only:
    refs:
      - master

npm_publish:
  stage: publish
  variables:
    GIT_STRATEGY: clone
  script:
    - publish_to_npm
  dependencies:
    - build
  when: manual
  only:
    refs:
      - branches
    variables:
      - $CI_COMMIT_TITLE == $RELEASE_MSG


deploy_docs:
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster k8s --server="${K8S_CLUSTER_ADDRESS}"
    - kubectl config set-credentials ${K8S_USER} --token=${K8S_TOKEN}
    - kubectl config set-context default --cluster=k8s --user=${K8S_USER} --namespace=${K8S_NAMESPACE}
    - kubectl config use-context default
    - helm upgrade oida-docs ./deploy/docs --set image.tag=${VERSION_TAG} --set "ingress.hosts[0].host=${DOCS_DEPLOYMENT_HOST},ingress.hosts[0].paths={/}" --set "ingress.tls[0].hosts[0]=${DOCS_DEPLOYMENT_HOST}" --set "gatekeeper.redirect=https://${DOCS_DEPLOYMENT_HOST}" --namespace ${K8S_NAMESPACE} --reuse-values
  dependencies:
    - publish_apps
  only:
    refs:
      - master

release:
  stage: release
  variables:
    GIT_STRATEGY: clone
  script:
    - try_release
  dependencies:
    - build
  when: manual
  only:
    refs:
      - master
  except:
    variables:
      - $CI_COMMIT_TITLE == $RELEASE_MSG


.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x

  export VERSION_TAG=$(if [ "$CI_COMMIT_TAG" == "" ]; then echo $CI_COMMIT_REF_SLUG.$CI_PIPELINE_IID.$CI_COMMIT_SHORT_SHA; else echo ${CI_COMMIT_TAG}; fi)

  function git_login() {
    git config --global user.name "$GIT_USER"
    git config --global user.email "$GIT_EMAIL"
    git config --global http.sslVerify false
    git remote set-url origin "https://$GIT_USER:$GIT_PWD@gitlab.dev.eoss-cloud.it/$CI_PROJECT_PATH.git"
  }

  function nexus_login() {
     echo //$NEXUS_REPO/:_auth=$NEXUS_AUTH_TOKEN > ~/.npmrc
  }

  function github_setup() {
    git config --global user.name "$GITHUB_USER"
    git config --global user.email "$GITHUB_EMAIL"
    git remote add github "https://$GITHUB_TOKEN@$GITHUB_REPO.git"
  }

  function npm_login() {
    echo //registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN > ~/.npmrc
  }

  function merge_to_github_branch() {
    git_login
    git checkout github/master
    git merge $CI_COMMIT_SHA --no-commit || true
    git checkout --theirs -- packages/*/CHANGELOG.md
    npx replace-in-file /https://gitlab.dev.eoss-cloud.it/$CI_PROJECT_PATH/g https://$GITHUB_REPO packages/*/CHANGELOG.md --isRegex
    git add packages/*/CHANGELOG.md
    git rm -r deploy || true
    git rm -r -f packages/docs || true
    git rm typedoc.json || true
    git rm tsconfig.typedoc.json || true
    git rm .gitlab-ci.yml || true
    git checkout --ours -- package.json
    git commit -m 'chore: merge from upstream repository' --no-verify
    git push origin
  }

  function push_to_github() {
    github_setup
    git push github github/master:main
  }

  function publish_to_npm() {
    npm_login
    node_modules/.bin/lerna exec --stream --ignore @oidajs/docs -- npm publish
  }

  function try_release() {
    git checkout $CI_COMMIT_REF_SLUG
    if [ $(git rev-parse HEAD) == $CI_COMMIT_SHA ]; then
      git_login
      node_modules/.bin/lerna version --yes
    else
       echo 'Commit is not on branch tip. Unable to perform a release'
       exit 1
    fi
  }

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }


  function docker_login() {
    echo "Logging to Docker registry..."
    docker login -u "$DOCKER_REGISTRY_USERNAME" -p "$DOCKER_REGISTRY_PASSWORD" "$DOCKER_REGISTRY_URL"
    echo ""
  }

  function build_docker_images() {
    docker_login

    for package in packages/*/; do
        if [[ -f "$package"/Dockerfile ]]; then
            PACKAGE=`basename "$package"`;
            DOCKER_TAG=$DOCKER_REGISTRY_URL/oida-$PACKAGE:$VERSION_TAG
            echo "Building Dockerfile for $PACKAGE application..."
            docker build \
                --build-arg HTTP_PROXY="$HTTP_PROXY" \
                --build-arg http_proxy="$http_proxy" \
                --build-arg HTTPS_PROXY="$HTTPS_PROXY" \
                --build-arg https_proxy="$https_proxy" \
                --build-arg FTP_PROXY="$FTP_PROXY" \
                --build-arg ftp_proxy="$ftp_proxy" \
                --build-arg NO_PROXY="$NO_PROXY" \
                --build-arg no_proxy="$no_proxy" \
                -t "$DOCKER_TAG" "$package"

            echo "Pushing to Docker Registry..."
            docker push "$DOCKER_TAG"
            echo ""
        fi
    done
  }


before_script:
  - *auto_devops
